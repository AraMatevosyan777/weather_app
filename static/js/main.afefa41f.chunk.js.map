{"version":3,"sources":["components/CitiesPage/cities.module.css","components/Navbar/nav.module.css","assets/loader.svg","components/WeatherPage/weather.module.css","api/api.js","redux/citiesReducer.js","redux/weatherReducer.js","components/Navbar/Toggle.jsx","components/Navbar/Navbar.jsx","components/Loader.jsx","components/WeatherPage/DailyWeather.jsx","components/WeatherPage/CurrentWeather.jsx","components/WeatherPage/HourlyWeather.jsx","components/WeatherPage/Weather.jsx","components/CitiesPage/City.jsx","components/CitiesPage/Cities.jsx","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","API_KEY","WeatherAPi","lat","lon","get","name","initialState","cities","addCity","city","type","browserHistory","createBrowserHistory","currentWeather","dailyWeather","hourlyWeather","toggle","setCurrentWeather","payload","setHourlyWeather","requestCurrentWeather","dispatch","getState","a","response","data","requestDailyWeather","currentCity","id","Date","now","length","every","daily","list","filter","item","dt_txt","getHours","hourly","slice","map","connect","state","weather","setToggle","className","m","value","onChange","checked","Navbar","nav","to","Loader","src","loader","alt","DailyWeather","requestWeatherByDay","dt","celsius","Math","floor","main","temp","fahrenheit","date","classNames","DailyWeatheritem","currentDay","onClick","icon","CurrentWeather","HourlyWeather","hour","hourlyWeatherItem","withRouter","requestCityWeather","alert","push","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","current","props","match","useEffect","params","key","City","updateCity","onCityDelete","useState","editMode","setEditMode","currentName","setCurrentName","e","currentTarget","setName","input","trim","inner","empty","exact","path","render","Boolean","window","location","hostname","reducers","combineReducers","action","persistConfig","storage","whitelist","persistedReducer","persistReducer","store","createStore","applyMiddleware","thunkMiddleware","persistedStore","persistStore","ReactDOM","StrictMode","loading","persistor","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.afefa41f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cities\":\"cities_cities__2BRUy\",\"input\":\"cities_input__1uDEp\",\"inner\":\"cities_inner__6Sljw\",\"city\":\"cities_city__2oSvm\",\"empty\":\"cities_empty__3KqKE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__1h3Rj\",\"toggle\":\"nav_toggle__1Xn3Y\"};","module.exports = __webpack_public_path__ + \"static/media/loader.5b18094e.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather\":\"weather_weather__uDB3l\",\"currentWeather\":\"weather_currentWeather__1s5vX\",\"hourlyWeather\":\"weather_hourlyWeather__2PmXC\",\"hourlyWeatherItem\":\"weather_hourlyWeatherItem__3DzmQ\",\"dailyWeather\":\"weather_dailyWeather__1DmLr\",\"DailyWeatheritem\":\"weather_DailyWeatheritem__3rzgT\",\"currentDay\":\"weather_currentDay__jhBRq\"};","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://api.openweathermap.org/data/2.5/`,\r\n    // headers: {\r\n    //     \"appid\": \"4f854dff31c2e1ca2516bffdbe8c42c1\"\r\n    // }\r\n})\r\nconst API_KEY = '4f854dff31c2e1ca2516bffdbe8c42c1'\r\n\r\nexport const WeatherAPi = {\r\n    currentWeather(lat, lon){\r\n        return instance.get(`weather?lat=${lat}&lon=${lon}&appid=${API_KEY}`)\r\n    },\r\n    cityWeather(name){\r\n        return instance.get(`weather?q=${name}&appid=${API_KEY}`)\r\n    },\r\n    dailyWeather(name){\r\n        return instance.get(`forecast?q=${name}&appid=${API_KEY}`)\r\n    },\r\n}","const ADD_CITY = 'ADD_CITY'\r\nconst DELETE_CITY = 'DELETE_CITY'\r\nconst UPDATE_CITY = 'UPDATE_CITY'\r\n\r\nconst initialState = {\r\n  cities: []\r\n}\r\n\r\nexport const citiesReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_CITY:\r\n      return {\r\n        ...state,\r\n        cities: [...state.cities, action.city]\r\n      }\r\n    case DELETE_CITY:\r\n      return {\r\n        ...state,\r\n        cities: state.cities.filter(city => city.id !== action.id)\r\n      }\r\n    case UPDATE_CITY:\r\n      return {\r\n        ...state,\r\n        cities: state.cities.map(city => {\r\n          if (city.id === action.id) {\r\n            city.name = action.name\r\n          }\r\n          return city\r\n        })\r\n      }\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport const addCity = (city) => ({ type: ADD_CITY, city })\r\nexport const onCityDelete = (id) => ({ type: DELETE_CITY, id })\r\nexport const updateCity = (name, id) => ({ type: UPDATE_CITY, name, id })","import { WeatherAPi } from \"../api/api\"\r\nimport { createBrowserHistory } from 'history';\r\nimport { addCity } from \"./citiesReducer\";\r\nexport const browserHistory = createBrowserHistory();\r\nconst SET_CURRENT_WEATHER = 'SET_CURRENT_WEATHER'\r\nconst SET_DAILY_WEATHER = 'SET_DAILY_WEATHER'\r\nconst SET_HOURLY_WEATHER = 'SET_HOURLY_WEATHER'\r\nconst SET_TOGGLE = 'SET_TOGGLE'\r\n\r\nconst initialState = {\r\n  currentWeather: null,\r\n  dailyWeather: [],\r\n  hourlyWeather: [],\r\n  toggle: true\r\n}\r\n\r\nexport const weatherReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_CURRENT_WEATHER:\r\n      return {\r\n        ...state,\r\n        currentWeather: action.payload\r\n      }\r\n    case SET_DAILY_WEATHER:\r\n      return {\r\n        ...state,\r\n        dailyWeather: action.payload\r\n      }\r\n    case SET_HOURLY_WEATHER:\r\n      return {\r\n        ...state,\r\n        hourlyWeather: action.payload\r\n      }\r\n    case SET_TOGGLE:\r\n      return {\r\n        ...state,\r\n        toggle: action.payload\r\n      }\r\n    default: return state\r\n  }\r\n}\r\n\r\nconst setCurrentWeather = (payload) => ({ type: SET_CURRENT_WEATHER, payload })\r\nconst setDailyWeather = (payload) => ({ type: SET_DAILY_WEATHER, payload })\r\nconst setHourlyWeather = (payload) => ({ type: SET_HOURLY_WEATHER, payload })\r\nexport const setToggle = (payload) => ({ type: SET_TOGGLE, payload })\r\n\r\nexport const requestCurrentWeather = (lat, lon) => async (dispatch, getState) => {\r\n  const response = await WeatherAPi.currentWeather(lat, lon)\r\n  dispatch(setCurrentWeather(response.data))\r\n  dispatch(requestDailyWeather(response.data.name))\r\n  const currentCity = {\r\n    name: response.data.name,\r\n    id: Date.now()\r\n  }\r\n  const cities = getState().cities.cities\r\n  if(cities.length === 0){\r\n    dispatch(addCity(currentCity))\r\n  }else{\r\n    cities.every(city=>{\r\n      if(city.name !== currentCity.name){\r\n        dispatch(addCity(currentCity))\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const requestCityWeather = (name) => async (dispatch) => {\r\n  try {\r\n    const response = await WeatherAPi.cityWeather(name)\r\n    dispatch(setCurrentWeather(response.data))\r\n    dispatch(requestDailyWeather(name))\r\n  } catch{\r\n    alert('city not found')\r\n    browserHistory.push('/weather')\r\n    navigator.geolocation.getCurrentPosition(function (position) {\r\n      const lat = position.coords.latitude\r\n      const lon = position.coords.longitude\r\n      dispatch(requestCurrentWeather(lat, lon))\r\n    })\r\n  }\r\n}\r\nconst requestDailyWeather = (name) => async (dispatch) => {\r\n  const response = await WeatherAPi.dailyWeather(name)\r\n  const daily = response.data.list.filter(item => {\r\n    // const currentTime = new Date().getHours()\r\n    const itemTime = new Date(item.dt_txt).getHours()\r\n    if (12 === itemTime) {\r\n      return item\r\n    }\r\n    // if(currentTime >= itemTime && currentTime < itemTime+3){\r\n    //   return item\r\n    // }\r\n  })\r\n  daily.filter(item => {\r\n    const currentDate = new Date()\r\n    const itemDate = new Date(item.dt_txt)\r\n    if (currentDate !== itemDate) return item\r\n  })\r\n  dispatch(setDailyWeather(daily))\r\n  const hourly = response.data.list.slice(2, 10).map(item => { return item })\r\n  dispatch(setHourlyWeather(hourly))\r\n}\r\n\r\nexport const requestWeatherByDay = (name, dt_txt) => async (dispatch) => {\r\n  const response = await WeatherAPi.dailyWeather(name)\r\n  const current = response.data.list.filter(item => item.dt_txt === dt_txt)\r\n  const currentWeather = {\r\n    ...response.data.city,\r\n    ...current[0]\r\n  }\r\n  dispatch(setCurrentWeather(currentWeather))\r\n\r\n  const hourly = response.data.list.filter(item => {\r\n    const itemDtTxt = item.dt_txt.slice(0, 10)\r\n    const dtTxt = dt_txt.slice(0, 10)\r\n    if (itemDtTxt === dtTxt) return item\r\n  })\r\n  const hourlyWeather = [\r\n    ...hourly\r\n  ]\r\n  dispatch(setHourlyWeather(hourlyWeather))\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport m from './nav.module.css'\r\nimport { connect } from 'react-redux'\r\nimport { setToggle } from '../../redux/weatherReducer'\r\n\r\nconst Toggle = ({toggle,setToggle}) => {\r\n    return (\r\n        <div className={m.toggle}>\r\n            <input name='toggle' type=\"radio\" value='celsius' onChange={() => setToggle(true)} checked={toggle} />&deg;C\r\n            <input name='toggle' type=\"radio\" value='fahrenheit' onChange={() => setToggle(false)} />&deg;F\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    toggle: state.weather.toggle\r\n})\r\nexport default connect(mapStateToProps,{setToggle})(Toggle)\r\n","import React from 'react'\r\nimport m from './nav.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\nimport Toggle from './Toggle'\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className={m.nav}>\r\n        <NavLink to='/weather'>Home</NavLink>\r\n        <NavLink to='/cities'>Favorite Cities</NavLink>\r\n        <Toggle/>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\nimport loader from '../assets/loader.svg'\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className='loader'>\r\n      <img src={loader} alt=\"\"/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","import React from 'react'\r\nimport m from './weather.module.css'\r\nimport classNames from 'classnames';\r\n\r\nconst DailyWeather = ({ daily, toggle, name, requestWeatherByDay, dt }) => {\r\n  const celsius = Math.floor(daily.main.temp - 273.15)\r\n  const fahrenheit = Math.floor((celsius * 9 / 5) + 32)\r\n  const date = daily.dt_txt.slice(5,10)\r\n  return (\r\n    <div className={classNames(m.DailyWeatheritem, dt === daily.dt && m.currentDay)} onClick={()=> requestWeatherByDay(name, daily.dt_txt)}>\r\n      <div className=\"date\">{date}</div>\r\n      <div>\r\n        {toggle\r\n          ? <h2>{celsius}&deg;C</h2>\r\n          : <h2>{fahrenheit}&deg;F</h2>\r\n        }\r\n        <img src={'http://openweathermap.org/img/wn/'+ daily.weather[0].icon +'.png'} alt=\"\"/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DailyWeather\r\n","import React from 'react'\r\nimport m from './weather.module.css'\r\n\r\nconst CurrentWeather = ({currentWeather, toggle, setToggle}) => {\r\n    const { name, main, weather } = currentWeather\r\n    const celsius = Math.floor(main.temp - 273.15)\r\n    const fahrenheit = Math.floor((celsius * 9 / 5) + 32)\r\n    \r\n    return (\r\n        <div className={m.currentWeather}>\r\n            <h3>{name}</h3>\r\n            {toggle\r\n                ? <h1>{celsius}&deg;C</h1>\r\n                : <h1>{fahrenheit}&deg;F</h1>\r\n            }\r\n            <img src={'http://openweathermap.org/img/wn/' + weather[0].icon + '@4x.png'} alt=\"\" />\r\n            <h4>{weather[0].main}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CurrentWeather\r\n","import React from 'react'\r\nimport m from './weather.module.css'\r\n\r\nconst HourlyWeather = ({hourly, toggle}) => {\r\n    const celsius = Math.floor(hourly.main.temp - 273.15)\r\n    const fahrenheit = Math.floor((celsius * 9 / 5) + 32)\r\n    const hour = hourly.dt_txt.slice(10)\r\n  return (\r\n    <div className={m.hourlyWeatherItem}>\r\n      <div>{hour}</div>\r\n      {toggle\r\n        ? <div>{celsius}&deg;C</div>\r\n        : <div>{fahrenheit}&deg;F</div>\r\n      }\r\n      <img src={'http://openweathermap.org/img/wn/'+ hourly.weather[0].icon +'.png'} alt=\"\"/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HourlyWeather\r\n","import React, { useEffect } from 'react'\r\nimport m from './weather.module.css'\r\nimport { connect } from 'react-redux'\r\nimport { requestCurrentWeather, requestCityWeather, requestWeatherByDay } from '../../redux/weatherReducer'\r\nimport { withRouter } from 'react-router-dom'\r\nimport Loader from '../Loader'\r\nimport DailyWeather from './DailyWeather'\r\nimport CurrentWeather from './CurrentWeather'\r\nimport HourlyWeather from './HourlyWeather'\r\n\r\nconst Weather = (props) => {\r\n    const {requestCurrentWeather, requestCityWeather, currentWeather, \r\n        match, dailyWeather, hourlyWeather, requestWeatherByDay, toggle} = props\r\n    useEffect(() => {\r\n        if(match.params.city){\r\n            requestCityWeather(match.params.city)\r\n        }else{\r\n            navigator.geolocation.getCurrentPosition(function (position) {\r\n                let lat = position.coords.latitude\r\n                let lon = position.coords.longitude\r\n                requestCurrentWeather(lat, lon)\r\n            })\r\n        }\r\n    }, [match.params.city, requestCityWeather, requestCurrentWeather])\r\n   \r\n    if (!currentWeather) return <Loader/>\r\n    return (\r\n        <div className={m.weather}>\r\n            <CurrentWeather currentWeather={currentWeather} toggle={toggle}/>\r\n            <div className={m.hourlyWeather}>\r\n                {hourlyWeather.map(hourly=> <HourlyWeather key={hourly.dt} hourly={hourly} toggle={toggle}/>)}\r\n            </div>\r\n            <div className={m.dailyWeather}>\r\n                {dailyWeather.map(daily=> \r\n                <DailyWeather \r\n                key={daily.dt} \r\n                daily={daily} \r\n                toggle={toggle}\r\n                requestWeatherByDay={requestWeatherByDay}\r\n                dt={currentWeather.dt}\r\n                name={currentWeather.name}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    currentWeather: state.weather.currentWeather,\r\n    dailyWeather: state.weather.dailyWeather,\r\n    hourlyWeather: state.weather.hourlyWeather,\r\n    toggle: state.weather.toggle\r\n})\r\nexport default withRouter(connect(mapStateToProps, \r\n    { requestCurrentWeather, requestCityWeather, requestWeatherByDay })(Weather))\r\n","import React, { useState } from 'react'\r\nimport m from './cities.module.css'\r\n\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst City = ({city, updateCity, onCityDelete}) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [currentName, setCurrentName] = useState(city.name)\r\n    const update = (name, id) => {\r\n        updateCity(name, id)\r\n        setEditMode(false)\r\n    }\r\n    return (\r\n        <div className={m.city} key={city.id}>\r\n            {!editMode\r\n                ?<>\r\n                    <NavLink to={'/weather/' + city.name}>{city.name}</NavLink>\r\n                    <div>\r\n                        <button onClick={() => onCityDelete(city.id)}>Delete</button>\r\n                        <button onClick={() => setEditMode(true)}>Edit</button>\r\n                    </div>\r\n                </>\r\n                :<>\r\n                    <input value={currentName} onChange={(e) => setCurrentName(e.currentTarget.value)} />\r\n                    <button onClick={() => update(currentName, city.id)}>save</button>\r\n                </>\r\n\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default City\r\n","import React, { useState } from 'react'\r\nimport m from './cities.module.css'\r\nimport { connect } from 'react-redux'\r\nimport { addCity, onCityDelete, updateCity } from '../../redux/citiesReducer'\r\nimport City from './City'\r\n\r\nconst Cities = ({ cities, addCity, onCityDelete, updateCity }) => {\r\n    const [name, setName] = useState('')\r\n\r\n    const add = () => {\r\n        if (name.trim()) {\r\n            let city = {\r\n                name: name,\r\n                id: Date.now()\r\n            }\r\n            addCity(city)\r\n            setName('')\r\n        } else {\r\n            alert('enter city name')\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <div className={m.cities}>\r\n            <div className={m.input}>\r\n                <input type=\"text\" value={name} onChange={(e) => setName(e.currentTarget.value)} />\r\n                <button onClick={add}>Add City +</button>\r\n            </div>\r\n            <div className={m.inner}>\r\n                {cities.length === 0\r\n                    ? <div className={m.empty}>empty...</div>\r\n                    : cities.map(city => \r\n                    <City key={city.id} \r\n                        city={city}\r\n                        onCityDelete={onCityDelete}\r\n                        updateCity={updateCity}/>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    cities: state.cities.cities\r\n})\r\n\r\nexport default connect(mapStateToProps, { addCity, onCityDelete, updateCity })(Cities)\r\n","import React from 'react'\nimport './App.css'\nimport Navbar from './components/Navbar/Navbar'\nimport {Route, Redirect, withRouter} from 'react-router-dom'\nimport Weather from './components/WeatherPage/Weather'\nimport Cities from './components/CitiesPage/Cities'\n\nconst App = () => {\n    return (\n    <div className='app'>\n      <Navbar/>\n      <div className='content'>\n        <Route exact path='/' render={()=> <Redirect to='/weather'/>}/> \n        <Route path='/weather/:city?' render={()=> <Weather/>}/> \n        <Route path='/cities' render={()=> <Cities/>}/>\n      </div>\n    </div>\n  )\n}\n\nexport default withRouter(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore, combineReducers, applyMiddleware} from 'redux'\r\nimport thunkMiddleware  from 'redux-thunk'\r\nimport { weatherReducer } from './weatherReducer'\r\nimport { citiesReducer } from './citiesReducer'\r\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\n\r\nconst reducers = combineReducers({\r\n    weather: weatherReducer,\r\n    cities: citiesReducer\r\n})\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['cities']\r\n}\r\nconst persistedReducer = persistReducer(persistConfig, reducers)\r\nexport const store = createStore(persistedReducer, applyMiddleware(thunkMiddleware))\r\nexport const persistedStore = persistStore(store)\r\n\r\n// export const store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport { store, persistedStore } from './redux/store'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <PersistGate loading={null} persistor={persistedStore}>\n          <App />\n        </PersistGate>\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}