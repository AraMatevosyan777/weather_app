{"version":3,"sources":["redux/weather/actions.js","redux/weather/weatherReducer.js","redux/cities/actions.js","redux/cities/citiesReducer.js","redux/store.js","components/common/Toggle.jsx","components/Navbar/index.jsx","components/WeatherPage/DailyWeather.jsx","types.js","components/common/Loader.jsx","components/WeatherPage/CurrentWeather.jsx","components/WeatherPage/HourlyWeather.jsx","components/WeatherPage/index.jsx","api/api.js","redux/weather/thunks.js","containers/WeatherPage/index.jsx","components/City/index.jsx","Modals/CityModal/index.jsx","Routes/publicRoutes.js","Routes/paths.js","containers/CitiesPage/index.jsx","Routes/Routing.js","App.js","serviceWorker.js","index.js","components/WeatherPage/weather.module.css","containers/CitiesPage/index.module.css","components/common/index.module.css","components/Navbar/index.module.css","components/City/index.module.css","assets/images/loader.svg","assets/images/delete.svg"],"names":["setCurrentWeather","payload","type","setDailyWeather","setHourlyWeather","setLoading","initialState","currentWeather","dailyWeather","hourlyWeather","toggle","loading","addCurrentCity","city","cities","reducers","combineReducers","weather","state","action","dt","dt_txt","temp","main","name","icon","filter","id","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","store","createStore","applyMiddleware","thunkMiddleware","persistedStore","persistStore","window","connect","setToggle","className","m","value","onChange","checked","Navbar","nav","activeClassName","active","to","DailyWeather","PropTypes","number","string","shape","daily","celsius","Math","floor","fahrenheit","date","slice","currentDate","Date","getDate","itemDate","style","color","textDecoration","classNames","DailyWeatheritem","currentDay","src","alt","Loader","loader","CurrentWeather","HourlyWeather","hourly","hour","hourlyWeatherItem","Weather","map","instance","axios","create","baseURL","API_KEY","WeatherAPi","cityParams","get","requestDailyWeather","dispatch","a","response","data","list","item","currentTime","getHours","itemTime","requestWeatherByDay","current","itemHour","WeatherContainer","refreshWeather","props","match","params","day","undefined","requestCurrentWeather","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","this","prevProps","prevState","Component","withRouter","getState","currentCity","now","length","every","City","onCityDelete","icons","remove","onClick","CityModal","error","handleClose","Modal","show","onHide","backdrop","keyboard","Header","closeButton","Title","Body","Footer","Button","variant","component","path","addCity","useState","setName","setError","onSubmit","e","trim","preventDefault","cityName","toUpperCase","citiesJson","input","currentTarget","inner","empty","Routing","routes","route","exact","render","App","persistor","Boolean","location","hostname","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.1a469219.chunk.js","sourcesContent":["export const SET_CURRENT_WEATHER = 'SET_CURRENT_WEATHER'\r\nexport const SET_DAILY_WEATHER = 'SET_DAILY_WEATHER'\r\nexport const SET_HOURLY_WEATHER = 'SET_HOURLY_WEATHER'\r\nexport const SET_TOGGLE = 'SET_TOGGLE'\r\nexport const LOADING = 'LOADING'\r\n\r\nexport const setCurrentWeather = (payload) => ({ type: SET_CURRENT_WEATHER, payload })\r\nexport const setDailyWeather = (payload) => ({ type: SET_DAILY_WEATHER, payload })\r\nexport const setHourlyWeather = (payload) => ({ type: SET_HOURLY_WEATHER, payload })\r\nexport const setToggle = (payload) => ({ type: SET_TOGGLE, payload })\r\nexport const setLoading = (payload) => ({ type: LOADING, payload })","import { SET_CURRENT_WEATHER, SET_DAILY_WEATHER, SET_HOURLY_WEATHER, SET_TOGGLE, LOADING } from \"./actions\";\r\n\r\nconst initialState = {\r\n  currentWeather: null,\r\n  dailyWeather: null,\r\n  hourlyWeather: null,\r\n  toggle: true,\r\n  loading: false,\r\n}\r\n\r\nexport const weatherReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_CURRENT_WEATHER:\r\n      const currentWeather = {\r\n        dt: action.payload.dt,\r\n        dt_txt: action.payload.dt_txt,\r\n        temp: action.payload.main.temp,\r\n        name: action.payload.name,\r\n        weather: {\r\n          icon: action.payload.weather[0].icon,\r\n          main: action.payload.weather[0].main\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        currentWeather: currentWeather\r\n      }\r\n    case SET_DAILY_WEATHER:\r\n      return {\r\n        ...state,\r\n        dailyWeather: action.payload\r\n      }\r\n    case SET_HOURLY_WEATHER:\r\n      return {\r\n        ...state,\r\n        hourlyWeather: action.payload\r\n      }\r\n    case SET_TOGGLE:\r\n      return {\r\n        ...state,\r\n        toggle: action.payload\r\n      }\r\n    case LOADING:\r\n      return {\r\n        ...state,\r\n        loading: action.payload\r\n      }\r\n    default: return state\r\n  }\r\n}\r\n\r\n\r\n\r\n","export const ADD_CITY = 'ADD_CITY'\r\nexport const ADD_CURRENT_CITY = 'ADD_CURRENT_CITY'\r\nexport const DELETE_CITY = 'DELETE_CITY'\r\n\r\nexport const addCity = (city) => ({ type: ADD_CITY, city })\r\nexport const addCurrentCity = (city) => ({ type: ADD_CURRENT_CITY, city })\r\nexport const onCityDelete = (id) => ({ type: DELETE_CITY, id })\r\n","import { DELETE_CITY, ADD_CITY, ADD_CURRENT_CITY } from \"./actions\"\r\n\r\nconst initialState = {\r\n  cities: []\r\n}\r\n\r\nexport const citiesReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_CITY:\r\n      return {\r\n        ...state,\r\n        cities: [...state.cities, action.city]\r\n      }\r\n    case ADD_CURRENT_CITY:\r\n      return {\r\n        ...state,\r\n        cities: [...state.cities, action.city]\r\n      }\r\n    case DELETE_CITY:\r\n      return {\r\n        ...state,\r\n        cities: state.cities.filter(city => city.id !== action.id)\r\n      }\r\n    default: return state\r\n  }\r\n}\r\n\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { weatherReducer } from './weather/weatherReducer'\r\nimport { citiesReducer } from './cities/citiesReducer'\r\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\n\r\nconst reducers = combineReducers({\r\n    weather: weatherReducer,\r\n    cities: citiesReducer\r\n})\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['cities']\r\n}\r\nconst persistedReducer = persistReducer(persistConfig, reducers)\r\nexport const store = createStore(persistedReducer, applyMiddleware(thunkMiddleware))\r\nexport const persistedStore = persistStore(store)\r\n\r\n// export const store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\nwindow.store = store;","import React from 'react'\r\nimport m from './index.module.css'\r\nimport { connect } from 'react-redux'\r\nimport { setToggle } from '../../redux/weather/actions'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Toggle = ({ toggle, setToggle }) => {\r\n    return (\r\n        <div className={m.toggle}>\r\n            <input name='toggle' type=\"radio\" value='celsius' onChange={() => setToggle(true)} checked={toggle} />&deg;C\r\n            <input name='toggle' type=\"radio\" value='fahrenheit' onChange={() => setToggle(false)} />&deg;F\r\n        </div>\r\n    )\r\n}\r\n\r\nToggle.propTypes = {\r\n    toggle: PropTypes.bool,\r\n    setToggle: PropTypes.func,\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    toggle: state.weather.toggle\r\n})\r\nexport default connect(mapStateToProps, { setToggle })(Toggle)\r\n","import React from 'react'\r\nimport m from './index.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\nimport Toggle from '../common/Toggle'\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className={m.nav}>\r\n      <NavLink activeClassName={m.active} to='/weather'>Home</NavLink>\r\n      <NavLink activeClassName={m.active} to='/cities'>Favorite Cities</NavLink>\r\n      <Toggle />\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\nimport m from './weather.module.css'\r\nimport classNames from 'classnames';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { currentWeatherType } from '../../types';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DailyWeather = ({ daily, toggle, name, dt }) => {\r\n  const celsius = Math.floor(daily.temp - 273.15)\r\n  const fahrenheit = Math.floor((celsius * 9 / 5) + 32)\r\n  const date = daily.dt_txt.slice(5, 10)\r\n  const currentDate = new Date(dt * 1000).getDate()\r\n  const itemDate = new Date(daily.dt * 1000).getDate()\r\n  return (\r\n    <NavLink to={`/weather/${name}/${itemDate}`} style={{ color: 'black', textDecoration: 'none' }}>\r\n      <div className={classNames(m.DailyWeatheritem, currentDate === itemDate && m.currentDay)}>\r\n        <div className=\"date\">{date}</div>\r\n        <div>\r\n          {toggle\r\n            ? <h2>{celsius}&deg;C</h2>\r\n            : <h2>{fahrenheit}&deg;F</h2>\r\n          }\r\n          <img src={'http://openweathermap.org/img/wn/' + daily.weather.icon + '.png'} alt=\"\" />\r\n        </div>\r\n      </div>\r\n    </NavLink>\r\n  )\r\n}\r\n\r\nDailyWeather.propTypes = {\r\n  daily: PropTypes.shape(currentWeatherType),\r\n  toggle: PropTypes.bool,\r\n  name: PropTypes.string,\r\n  dt: PropTypes.number,\r\n}\r\n\r\nexport default DailyWeather\r\n","import PropTypes from 'prop-types';\r\n\r\nexport const currentWeatherType = {\r\n    dt: PropTypes.number,\r\n    dt_txt: PropTypes.string,\r\n    temp: PropTypes.number,\r\n    name: PropTypes.string,\r\n    weather: PropTypes.shape({\r\n        icon: PropTypes.string,\r\n        main: PropTypes.string\r\n    })\r\n}\r\nexport const hourlyWeatherType = {\r\n    temp: PropTypes.number,\r\n    dt_txt: PropTypes.string,\r\n    icon: PropTypes.string\r\n}\r\nexport const cityType = {\r\n    name: PropTypes.string,\r\n    id: PropTypes.number\r\n}\r\n","import React from 'react'\r\nimport loader from '../../assets/images/loader.svg'\r\nimport m from './index.module.css'\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className={m.loader}>\r\n      <img src={loader} alt=\"\"/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","import React from 'react'\r\nimport Loading from '../common/Loader'\r\nimport { currentWeatherType } from '../../types'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CurrentWeather = ({ currentWeather, toggle, loading }) => {\r\n    const { name, temp, weather } = currentWeather\r\n    const celsius = Math.floor(temp - 273.15)\r\n    const fahrenheit = Math.floor((celsius * 9 / 5) + 32)\r\n\r\n    if (loading) return <Loading />\r\n    return (\r\n        <>\r\n            <h3>{name}</h3>\r\n            {toggle\r\n                ? <h1>{celsius}&deg;C</h1>\r\n                : <h1>{fahrenheit}&deg;F</h1>\r\n            }\r\n            <img src={'http://openweathermap.org/img/wn/' + weather.icon + '@4x.png'} alt=\"\" />\r\n            <h4>{weather.main}</h4>\r\n        </>\r\n    )\r\n}\r\n\r\nCurrentWeather.propTypes = {\r\n    currentWeather: PropTypes.shape(currentWeatherType) || null,\r\n    toggle: PropTypes.bool,\r\n    loading: PropTypes.bool,\r\n}\r\n\r\nexport default CurrentWeather\r\n","import React from 'react'\r\nimport m from './weather.module.css'\r\nimport PropTypes from 'prop-types';\r\nimport { hourlyWeatherType } from '../../types';\r\n\r\nconst HourlyWeather = ({ hourly, toggle }) => {\r\n  const celsius = Math.floor(hourly.temp - 273.15)\r\n  const fahrenheit = Math.floor((celsius * 9 / 5) + 32)\r\n  const hour = hourly.dt_txt.slice(10)\r\n  return (\r\n    <div className={m.hourlyWeatherItem}>\r\n      <div>{hour}</div>\r\n      {toggle\r\n        ? <div>{celsius}&deg;C</div>\r\n        : <div>{fahrenheit}&deg;F</div>\r\n      }\r\n      <img src={'http://openweathermap.org/img/wn/' + hourly.icon + '.png'} alt=\"\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nHourlyWeather.propTypes = {\r\n  hourly: PropTypes.shape(hourlyWeatherType),\r\n  toggle: PropTypes.bool,\r\n}\r\n\r\nexport default HourlyWeather\r\n","import React from 'react'\r\nimport m from './weather.module.css'\r\nimport DailyWeather from './DailyWeather'\r\nimport CurrentWeather from './CurrentWeather'\r\nimport HourlyWeather from './HourlyWeather'\r\nimport PropTypes from 'prop-types';\r\nimport { currentWeatherType, hourlyWeatherType } from '../../types'\r\n\r\nconst Weather = ({ currentWeather, dailyWeather, hourlyWeather, toggle, loading }) => {\r\n\r\n    return (\r\n        <div className={m.weather}>\r\n            <div className={m.currentWeather}>\r\n                <CurrentWeather currentWeather={currentWeather} toggle={toggle} loading={loading} />\r\n            </div>\r\n            <div className={m.hourlyWeather}>\r\n                {hourlyWeather.map(hourly => <HourlyWeather key={hourly.dt_txt} hourly={hourly} toggle={toggle} />)}\r\n            </div>\r\n            <div className={m.dailyWeather}>\r\n                {dailyWeather.map(daily =>\r\n                    <DailyWeather\r\n                        key={daily.dt}\r\n                        daily={daily}\r\n                        toggle={toggle}\r\n                        dt={currentWeather.dt}\r\n                        name={currentWeather.name} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nWeather.propTypes = {\r\n    currentWeather: PropTypes.shape(currentWeatherType) || null,\r\n    dailyWeather: PropTypes.arrayOf(PropTypes.shape(currentWeatherType)) || null,\r\n    hourlyWeather: PropTypes.arrayOf(PropTypes.shape(hourlyWeatherType)) || null,\r\n    toggle: PropTypes.bool,\r\n    loading: PropTypes.bool,\r\n}\r\n\r\nexport default Weather\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://api.openweathermap.org/data/2.5/`,\r\n})\r\nconst API_KEY = '4f854dff31c2e1ca2516bffdbe8c42c1'\r\n\r\nexport const WeatherAPi = {\r\n    currentWeather(cityParams) {\r\n        return instance.get(`weather?${cityParams}&appid=${API_KEY}`)\r\n    },\r\n    dailyWeather(name) {\r\n        return instance.get(`forecast?q=${name}&appid=${API_KEY}`)\r\n    },\r\n}","import { setDailyWeather, setLoading, setCurrentWeather, setHourlyWeather } from \"./actions\"\r\nimport { WeatherAPi } from \"../../api/api\"\r\nimport { addCurrentCity } from \"../cities/actions\";\r\n\r\nexport const requestCurrentWeather = (cityParams, date) => async (dispatch, getState) => {\r\n  const response = await WeatherAPi.currentWeather(cityParams)\r\n  dispatch(requestDailyWeather(response.data.name, response.data.dt))\r\n  dispatch(requestWeatherByDay(response.data.name, date))\r\n  const currentCity = {\r\n    name: response.data.name,\r\n    id: Date.now()\r\n  }\r\n  const cities = getState().cities.cities\r\n  if (cities.length === 0) {\r\n    dispatch(addCurrentCity(currentCity))\r\n  } else {\r\n    if (cities.every(city => city.name !== currentCity.name)) {\r\n      dispatch(addCurrentCity(currentCity))\r\n    }\r\n  }\r\n}\r\n\r\nconst requestDailyWeather = (name) => async (dispatch) => {\r\n  const response = await WeatherAPi.dailyWeather(name)\r\n  const daily = response.data.list.filter(item => {\r\n    const currentTime = new Date().getHours()\r\n    const itemTime = new Date(item.dt_txt).getHours()\r\n    if (currentTime >= itemTime && currentTime < itemTime + 3) {\r\n      return item\r\n    }\r\n  })\r\n  daily.filter(item => {\r\n    const currentDate = new Date()\r\n    const itemDate = new Date(item.dt_txt)\r\n    if (currentDate !== itemDate) return item\r\n  })\r\n  const payload = daily.map(item => {\r\n    item = {\r\n      dt: item.dt,\r\n      dt_txt: item.dt_txt,\r\n      temp: item.main.temp,\r\n      name: name,\r\n      weather: {\r\n        icon: item.weather[0].icon,\r\n        main: item.weather[0].main\r\n      }\r\n    }\r\n    return item\r\n  })\r\n  dispatch(setDailyWeather(payload))\r\n}\r\n\r\nconst requestWeatherByDay = (name, date) => async (dispatch) => {\r\n  dispatch(setLoading(true))\r\n  const response = await WeatherAPi.dailyWeather(name)\r\n  const current = response.data.list.filter(item => {\r\n    const itemDate = new Date(item.dt_txt).getDate()\r\n    const itemHour = new Date(item.dt_txt).getHours()\r\n    const currentTime = new Date().getHours()\r\n    if (itemDate == date && currentTime >= itemHour && currentTime < itemHour + 3) {\r\n      return item\r\n    }\r\n  })\r\n  const currentWeather = {\r\n    ...response.data.city,\r\n    ...current[0]\r\n  }\r\n  dispatch(setCurrentWeather(currentWeather))\r\n\r\n  const hourly = response.data.list.filter(item => {\r\n    const itemDate = new Date(item.dt_txt).getDate()\r\n    if (itemDate == date) return item\r\n  })\r\n  const payload = hourly.map(item => {\r\n    item = {\r\n      temp: item.main.temp,\r\n      dt_txt: item.dt_txt,\r\n      icon: item.weather[0].icon\r\n    }\r\n    return item\r\n  })\r\n  dispatch(setHourlyWeather(payload))\r\n  dispatch(setLoading(false))\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport Weather from '../../components/WeatherPage/index'\r\nimport { connect } from 'react-redux'\r\nimport { requestCurrentWeather } from '../../redux/weather/thunks'\r\nimport { withRouter } from 'react-router-dom'\r\nimport Loader from '../../components/common/Loader'\r\nimport PropTypes from 'prop-types';\r\nimport { currentWeatherType, hourlyWeatherType } from '../../types'\r\n\r\nclass WeatherContainer extends Component {\r\n    refreshWeather = () => {\r\n        let date = this.props.match.params.day\r\n        if (date === undefined) {\r\n            date = new Date().getDate()\r\n        }\r\n        if (this.props.match.params.city) {\r\n            const cityParams = `q=${this.props.match.params.city}`\r\n            this.props.requestCurrentWeather(cityParams, date)\r\n        } else {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                let lat = position.coords.latitude\r\n                let lon = position.coords.longitude\r\n                const cityParams = `lat=${lat}&lon=${lon}`\r\n                this.props.requestCurrentWeather(cityParams, date)\r\n            })\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.refreshWeather()\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.match.params.day !== this.props.match.params.day) {\r\n            this.refreshWeather();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.currentWeather || !this.props.hourlyWeather) return <Loader />\r\n        return (\r\n            <Weather\r\n                currentWeather={this.props.currentWeather}\r\n                dailyWeather={this.props.dailyWeather}\r\n                hourlyWeather={this.props.hourlyWeather}\r\n                toggle={this.props.toggle}\r\n                loading={this.props.loading}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nWeatherContainer.propTypes = {\r\n    currentWeather: PropTypes.shape(currentWeatherType) || null,\r\n    dailyWeather: PropTypes.arrayOf(PropTypes.shape(currentWeatherType)) || null,\r\n    hourlyWeather: PropTypes.arrayOf(PropTypes.shape(hourlyWeatherType)) || null,\r\n    toggle: PropTypes.bool,\r\n    loading: PropTypes.bool,\r\n    requestCurrentWeather: PropTypes.func,\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    currentWeather: state.weather.currentWeather,\r\n    dailyWeather: state.weather.dailyWeather,\r\n    hourlyWeather: state.weather.hourlyWeather,\r\n    toggle: state.weather.toggle,\r\n    loading: state.weather.loading,\r\n})\r\nexport default withRouter(connect(mapStateToProps,\r\n    { requestCurrentWeather })(WeatherContainer))\r\n","import React from 'react'\r\nimport m from './index.module.css'\r\nimport remove from '../../assets/images/delete.svg'\r\nimport { NavLink } from 'react-router-dom'\r\nimport PropTypes from 'prop-types';\r\nimport { cityType } from '../../types'\r\n\r\nconst City = ({ city, onCityDelete }) => {\r\n    return (\r\n        <div className={m.city} key={city.id}>\r\n            <NavLink to={'/weather/' + city.name}>{city.name}</NavLink>\r\n            <div className={m.icons}>\r\n                <img className={m.icon} src={remove} alt=\"\" onClick={() => onCityDelete(city.id)} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nCity.propTypes = {\r\n    city: PropTypes.shape(cityType),\r\n    onCityDelete: PropTypes.func,\r\n}\r\n\r\nexport default City\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Modal, Button } from 'react-bootstrap'\r\n\r\nconst CityModal = ({ error, handleClose }) => {\r\n\r\n    return (\r\n        <Modal\r\n            show={!!error}\r\n            onHide={handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Error</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {error}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n          </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nCityModal.propTypes = {\r\n    error: PropTypes.string,\r\n    handleClose: PropTypes.func\r\n}\r\n\r\nexport default CityModal\r\n","import WeatherContainer from '../containers/WeatherPage/index'\r\nimport Cities from '../containers/CitiesPage/index'\r\nimport { CITIES_PATH, WEATHER_PATH } from './paths'\r\n\r\nconst WEATHER = {\r\n    component: WeatherContainer,\r\n    path: WEATHER_PATH\r\n}\r\nconst CITIES = {\r\n    component: Cities,\r\n    path: CITIES_PATH\r\n}\r\n\r\nexport default [WEATHER, CITIES]","export const WEATHER_PATH = '/weather/:city?/:day?';\r\nexport const CITIES_PATH = '/cities'\r\n","import React, { useState } from 'react'\r\nimport m from './index.module.css'\r\nimport { connect } from 'react-redux'\r\nimport { onCityDelete, addCity } from '../../redux/cities/actions'\r\nimport PropTypes from 'prop-types';\r\nimport { cityType } from '../../types'\r\nimport City from '../../components/City';\r\nimport CityModal from '../../Modals/CityModal/index';\r\nimport citiesJson from 'cities.json'\r\n\r\nconst Cities = ({ cities, addCity, onCityDelete }) => {\r\n    const [name, setName] = useState('')\r\n    const [error, setError] = useState('')\r\n\r\n    const add = (e) => {\r\n        if (name.trim()) {\r\n            e.preventDefault()\r\n            let cityName = name[0].toUpperCase() + name.slice(1);\r\n            const jsonFilter = citiesJson.filter(item => {\r\n                if (cityName === item.name) {\r\n                    return item\r\n                }\r\n            })\r\n            if (jsonFilter.length) {\r\n                const stateFilter = cities.filter(item => {\r\n                    if (cityName === item.name) {\r\n                        return item\r\n                    }\r\n                })\r\n                if (!stateFilter.length) {\r\n                    let city = {\r\n                        name: cityName,\r\n                        id: Date.now()\r\n                    }\r\n                    addCity(city)\r\n                    setName('')\r\n                } else {\r\n                    setError('City is already added')\r\n                }\r\n\r\n            } else {\r\n                setError('City is not defined')\r\n            }\r\n        } else {\r\n            e.preventDefault()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={m.cities}>\r\n            <form onSubmit={add} className={m.input}>\r\n                <input type=\"text\" value={name} onChange={(e) => setName(e.currentTarget.value)} />\r\n                <button >Add City +</button>\r\n            </form>\r\n            <div className={m.inner}>\r\n                {cities.length === 0\r\n                    ? <div className={m.empty}>empty...</div>\r\n                    : cities.map(city =>\r\n                        <City key={city.id}\r\n                            city={city}\r\n                            onCityDelete={onCityDelete} />)\r\n                }\r\n            </div>\r\n            <CityModal error={error} handleClose={() => setError('')} />\r\n        </div>\r\n    )\r\n}\r\n\r\nCities.propTypes = {\r\n    cities: PropTypes.arrayOf(PropTypes.shape(cityType)),\r\n    addCity: PropTypes.func,\r\n    onCityDelete: PropTypes.func,\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    cities: state.cities.cities\r\n})\r\n\r\nexport default connect(mapStateToProps, { addCity, onCityDelete })(Cities)\r\n","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport routes from './publicRoutes'\r\n\r\nconst Routing = () => {\r\n    return (\r\n        <>\r\n            {routes.map(route =>\r\n                (<Route key={route.path} path={route.path} component={route.component} />)\r\n            )}\r\n            <Route exact path='/' render={() => <Redirect to='/weather' />} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Routing\r\n","import React from 'react'\r\nimport { Provider } from 'react-redux'\r\nimport { HashRouter as Router } from 'react-router-dom'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport { store, persistedStore } from './redux/store'\r\nimport Navbar from './components/Navbar'\r\nimport './App.css'\r\nimport Routing from './Routes/Routing'\r\n\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistedStore}>\r\n        <Router>\r\n          <div className='app'>\r\n            <Navbar />\r\n            <div className='content'>\r\n              <Routing />\r\n            </div>\r\n          </div>\r\n        </Router>\r\n      </PersistGate>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather\":\"weather_weather__uDB3l\",\"currentWeather\":\"weather_currentWeather__1s5vX\",\"hourlyWeather\":\"weather_hourlyWeather__2PmXC\",\"hourlyWeatherItem\":\"weather_hourlyWeatherItem__3DzmQ\",\"dailyWeather\":\"weather_dailyWeather__1DmLr\",\"DailyWeatheritem\":\"weather_DailyWeatheritem__3rzgT\",\"currentDay\":\"weather_currentDay__jhBRq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cities\":\"CitiesPage_cities__SJOJY\",\"input\":\"CitiesPage_input__DKyH8\",\"inner\":\"CitiesPage_inner__10A3N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toggle\":\"common_toggle__3tY5A\",\"loader\":\"common_loader__2jlxV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1zXyi\",\"active\":\"Navbar_active__R_O9E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cities\":\"City_cities__2OORZ\",\"input\":\"City_input__2z9tk\",\"inner\":\"City_inner__1hCAk\",\"city\":\"City_city__2p_To\",\"empty\":\"City_empty__9HJKb\",\"icons\":\"City_icons__3OdyG\",\"icon\":\"City_icon__6iO3-\"};","module.exports = __webpack_public_path__ + \"static/media/loader.5b18094e.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.12333ffe.svg\";"],"sourceRoot":""}